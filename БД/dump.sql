/******************************************************************************/
/***         Generated by IBExpert 2019.8.30.1 02.06.2022 13:34:18          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'C:\Users\danie\Desktop\Новая папка\БД\BD1.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_DEP_ID;
SET GENERATOR GEN_DEP_ID TO 5;

CREATE GENERATOR GEN_DIRECTION_ID;
SET GENERATOR GEN_DIRECTION_ID TO 7;

CREATE GENERATOR GEN_EMPL_ID;
SET GENERATOR GEN_EMPL_ID TO 6;

CREATE GENERATOR GEN_PASS_ID;
SET GENERATOR GEN_PASS_ID TO 11;

CREATE GENERATOR GEN_POST_ID;
SET GENERATOR GEN_POST_ID TO 5;

CREATE GENERATOR GEN_ROUTE_ID;
SET GENERATOR GEN_ROUTE_ID TO 5;

CREATE GENERATOR GEN_STATION_ID;
SET GENERATOR GEN_STATION_ID TO 3;

CREATE GENERATOR GEN_TEAM_ID;
SET GENERATOR GEN_TEAM_ID TO 4;

CREATE GENERATOR GEN_TICKET_ID;
SET GENERATOR GEN_TICKET_ID TO 29;

CREATE GENERATOR GEN_TRAIN_ID;
SET GENERATOR GEN_TRAIN_ID TO 9;

CREATE GENERATOR GEN_TRIP_ID;
SET GENERATOR GEN_TRIP_ID TO 7;



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE ADDDEP (
    IN_ID INTEGER,
    IN_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDDIRECTION (
    IN_ID INTEGER,
    IN_NAME VARCHAR(40))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDEMPL (
    IN_ID_EMPL INTEGER,
    IN_FIO VARCHAR(50),
    IN_SEX INTEGER,
    IN_DATA DATE,
    IN_CHILD INTEGER,
    IN_DATA_EMPL DATE,
    IN_ID_POST INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDEMPL_TEAM (
    IN_ID_EMPL INTEGER,
    IN_ID_TEAM INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDPASS (
    IN_ID INTEGER,
    IN_PASSPORT INTEGER,
    IN_FIO VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDPOST (
    IN_ID INTEGER,
    IN_WAGE INTEGER,
    IN_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDROUTE (
    IN_ID_ROUTE INTEGER,
    IN_P_DEP VARCHAR(40),
    IN_P_AR VARCHAR(40),
    IN_TR_TIME INTEGER,
    IN_ID_DIR INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDROUTE_ST (
    IN_ID_ROUTE INTEGER,
    IN_ID_ST INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDSTATION (
    IN_ID INTEGER,
    IN_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDTEAM (
    IN_ID INTEGER,
    IN_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDTEAM_DEP (
    IN_ID_TEAM INTEGER,
    IN_ID_DEP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDTICKET (
    IN_ID_TIC INTEGER,
    IN_DATA DATE,
    IN_CARRIAGE INTEGER,
    IN_SPOT INTEGER,
    IN_ID_PASS INTEGER,
    IN_STATUS INTEGER,
    IN_PRICE INTEGER,
    IN_ID_ROUTE INTEGER,
    IN_ID_TRIP INTEGER,
    IN_DEPARTURES VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDTRAIN (
    IN_ID_TRAIN INTEGER,
    IN_KOL_CAR INTEGER,
    IN_KOL_SPOT INTEGER,
    IN_ID_ROUTE INTEGER,
    IN_ID_TRIP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ADDTRIP (
    IN_ID_TRIP INTEGER,
    IN_ID_ROUTE INTEGER,
    IN_STATUS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEDEP (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEDIRECTION (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEEMPL (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEEMPL_TEAM (
    IN_ID_EMPL INTEGER,
    IN_ID_TEAM INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEPASS (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEPOST (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEROUTE (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETEROUTE_ST (
    IN_ID_ROUTE INTEGER,
    IN_ID_ST INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETESTATION (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETETEAM (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETETEAM_DEP (
    IN_ID_TEAM INTEGER,
    IN_ID_DEP INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETETICKET (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETETRAIN (
    IN_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETETRIP (
    IN_ID_TRIP INTEGER,
    IN_ID_ROUTE INTEGER)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE DEP (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE DIRECTION (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(40)
);

CREATE TABLE EMPL (
    ID_EMPL    INTEGER NOT NULL,
    FIO        VARCHAR(50),
    SEX        INTEGER,
    DATA       DATE,
    CHILD      INTEGER,
    DATA_EMPL  DATE,
    ID_POST    INTEGER
);

CREATE TABLE EMPL_TEAM (
    ID_EMPL  INTEGER NOT NULL,
    ID_TEAM  INTEGER NOT NULL
);

CREATE TABLE LOADTEST (
    IDINT   INTEGER,
    CHARS1  VARCHAR(1000),
    CHARS2  VARCHAR(1000),
    CHARS3  VARCHAR(1000),
    CHARS4  VARCHAR(1000),
    INT1    INTEGER,
    INT2    INTEGER,
    INT3    INTEGER,
    INT4    INTEGER
);

CREATE TABLE PASS (
    ID        INTEGER NOT NULL,
    PASSPORT  INTEGER,
    FIO       VARCHAR(50)
);

CREATE TABLE POST (
    ID    INTEGER NOT NULL,
    WAGE  INTEGER,
    NAME  VARCHAR(50)
);

CREATE TABLE ROUTE (
    ID_ROUTE  INTEGER NOT NULL,
    P_DEP     VARCHAR(40),
    P_AR      VARCHAR(40),
    TR_TIME   INTEGER,
    ID_DIR    INTEGER
);

CREATE TABLE ROUTE_ST (
    ID_ST     INTEGER NOT NULL,
    ID_ROUTE  INTEGER NOT NULL
);

CREATE TABLE STATION (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE STATUS_LOOKUP (
    STATUS_ID    INTEGER,
    STATUS_NAME  VARCHAR(255)
);

CREATE TABLE STATUS_LOOKUP_TICKET (
    STATUS_ID    INTEGER,
    STATUS_NAME  VARCHAR(255)
);

CREATE TABLE TEAM (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50)
);

CREATE TABLE TEAM_DEP (
    ID_TEAM  INTEGER NOT NULL,
    ID_DEP   INTEGER NOT NULL
);

CREATE TABLE TICKET (
    ID_TIC      INTEGER NOT NULL,
    DATA        DATE,
    CARRIAGE    INTEGER,
    SPOT        INTEGER,
    ID_PASS     INTEGER,
    STATUS      INTEGER,
    PRICE       INTEGER,
    ID_ROUTE    INTEGER,
    ID_TRIP     INTEGER,
    DEPARTURES  VARCHAR(20)
);

CREATE TABLE TMP (
    ID    INTEGER,
    NAME  VARCHAR(50)
);

CREATE TABLE TRAIN (
    ID_TRAIN  INTEGER NOT NULL,
    KOL_CAR   INTEGER,
    KOL_SPOT  INTEGER,
    ID_ROUTE  INTEGER,
    ID_TRIP   INTEGER
);

CREATE TABLE TRIP (
    ID_TRIP   INTEGER NOT NULL,
    ID_ROUTE  INTEGER NOT NULL,
    STATUS    INTEGER
);



/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE DEP ADD CONSTRAINT PK_DEP PRIMARY KEY (ID);
ALTER TABLE DIRECTION ADD CONSTRAINT PK_DIRECTION PRIMARY KEY (ID);
ALTER TABLE EMPL ADD CONSTRAINT PK_EMPL PRIMARY KEY (ID_EMPL);
ALTER TABLE PASS ADD CONSTRAINT PK_PASS PRIMARY KEY (ID);
ALTER TABLE POST ADD CONSTRAINT PK_POST PRIMARY KEY (ID);
ALTER TABLE ROUTE ADD CONSTRAINT PK_ROUTE PRIMARY KEY (ID_ROUTE);
ALTER TABLE STATION ADD CONSTRAINT PK_STATION PRIMARY KEY (ID);
ALTER TABLE TEAM ADD CONSTRAINT PK_TEAM PRIMARY KEY (ID);
ALTER TABLE TICKET ADD CONSTRAINT PK_TICKET PRIMARY KEY (ID_TIC);
ALTER TABLE TRAIN ADD CONSTRAINT PK_TRAIN PRIMARY KEY (ID_TRAIN);
ALTER TABLE TRIP ADD CONSTRAINT PK_TRIP PRIMARY KEY (ID_TRIP, ID_ROUTE);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE EMPL ADD CONSTRAINT FK_EMPL_1 FOREIGN KEY (ID_POST) REFERENCES POST (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE EMPL_TEAM ADD CONSTRAINT FK_EMPL_TEAM_1 FOREIGN KEY (ID_EMPL) REFERENCES EMPL (ID_EMPL) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE EMPL_TEAM ADD CONSTRAINT FK_EMPL_TEAM_2 FOREIGN KEY (ID_TEAM) REFERENCES TEAM (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ROUTE ADD CONSTRAINT FK_ROUTE_1 FOREIGN KEY (ID_DIR) REFERENCES DIRECTION (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ROUTE_ST ADD CONSTRAINT FK_ROUTE_ST_1 FOREIGN KEY (ID_ST) REFERENCES STATION (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE ROUTE_ST ADD CONSTRAINT FK_ROUTE_ST_2 FOREIGN KEY (ID_ROUTE) REFERENCES ROUTE (ID_ROUTE) ON DELETE SET NULL;
ALTER TABLE TEAM_DEP ADD CONSTRAINT FK_TEAM_DEP_1 FOREIGN KEY (ID_TEAM) REFERENCES TEAM (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE TEAM_DEP ADD CONSTRAINT FK_TEAM_DEP_2 FOREIGN KEY (ID_DEP) REFERENCES DEP (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE TICKET ADD CONSTRAINT FK_TICKET_1 FOREIGN KEY (ID_PASS) REFERENCES PASS (ID) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE TICKET ADD CONSTRAINT FK_TICKET_2 FOREIGN KEY (ID_TRIP, ID_ROUTE) REFERENCES TRIP (ID_TRIP, ID_ROUTE) ON DELETE SET NULL ON UPDATE CASCADE;
ALTER TABLE TRAIN ADD CONSTRAINT FK_TRAIN_1 FOREIGN KEY (ID_TRIP, ID_ROUTE) REFERENCES TRIP (ID_TRIP, ID_ROUTE) ON DELETE SET NULL ON UPDATE CASCADE;


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: DEP_BI */
CREATE TRIGGER DEP_BI FOR DEP
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_dep_id,1);
end
^

/* Trigger: DIRECTION_BI */
CREATE TRIGGER DIRECTION_BI FOR DIRECTION
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_direction_id,1);
end
^

/* Trigger: EMPL_BI */
CREATE TRIGGER EMPL_BI FOR EMPL
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id_empl = gen_id(gen_empl_id,1);
end
^

/* Trigger: PASS_BI */
CREATE TRIGGER PASS_BI FOR PASS
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_pass_id,1);
end
^

/* Trigger: POST_BI */
CREATE TRIGGER POST_BI FOR POST
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_post_id,1);
end
^

/* Trigger: ROUTE_BI */
CREATE TRIGGER ROUTE_BI FOR ROUTE
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id_route = gen_id(gen_route_id,1);
end
^

/* Trigger: STATION_BI */
CREATE TRIGGER STATION_BI FOR STATION
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_station_id,1);
end
^

/* Trigger: TEAM_BI */
CREATE TRIGGER TEAM_BI FOR TEAM
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id = gen_id(gen_team_id,1);
end
^

/* Trigger: TICKET_BI */
CREATE TRIGGER TICKET_BI FOR TICKET
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id_tic = gen_id(gen_ticket_id,1);
end
^

/* Trigger: TRAIN_BI */
CREATE TRIGGER TRAIN_BI FOR TRAIN
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id_train = gen_id(gen_train_id,1);
end
^

/* Trigger: TRIP_BI */
CREATE TRIGGER TRIP_BI FOR TRIP
ACTIVE BEFORE INSERT POSITION 0
as
begin
    new.id_trip = gen_id(gen_trip_id,1);
end
^
SET TERM ; ^



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE ADDDEP (
    IN_ID INTEGER,
    IN_NAME VARCHAR(50))
AS
begin
  if (:in_id = 0) then  insert into dep values (:in_id, :in_name);
  else update dep set name=:in_name where id=:in_id;
end^


ALTER PROCEDURE ADDDIRECTION (
    IN_ID INTEGER,
    IN_NAME VARCHAR(40))
AS
begin
  if (:in_id = 0) then  insert into direction values (:in_id, :in_name);
  else update direction set name=:in_name where id=:in_id;
end^


ALTER PROCEDURE ADDEMPL (
    IN_ID_EMPL INTEGER,
    IN_FIO VARCHAR(50),
    IN_SEX INTEGER,
    IN_DATA DATE,
    IN_CHILD INTEGER,
    IN_DATA_EMPL DATE,
    IN_ID_POST INTEGER)
AS
begin
  if (:in_id_empl = 0) then  insert into empl values (:in_id_empl, :in_fio, :in_sex,
   :in_data, :in_child, :in_data_empl, :in_id_post);
  else update empl set fio=:in_fio,  sex=:in_sex, data=:in_data,
  child=:in_child, data_empl=:in_data_empl, id_post=:in_id_post where id_empl=:in_id_empl;
end^


ALTER PROCEDURE ADDEMPL_TEAM (
    IN_ID_EMPL INTEGER,
    IN_ID_TEAM INTEGER)
AS
declare variable reccount integer;
begin
  select count (*) from empl_team where id_empl=:in_id_empl and id_team=:in_id_team 
  into :reccount;
  if (:reccount = 0) then insert into empl_team values (:in_id_empl, :in_id_team);
  else update empl_team set id_empl=:in_id_empl,  id_team=:in_id_team;
end^


ALTER PROCEDURE ADDPASS (
    IN_ID INTEGER,
    IN_PASSPORT INTEGER,
    IN_FIO VARCHAR(50))
AS
begin
  if (:in_id = 0) then  insert into pass values (:in_id, :in_passport, :in_fio);
  else update pass set passport=:in_passport, fio=:in_fio where id=:in_id;
end^


ALTER PROCEDURE ADDPOST (
    IN_ID INTEGER,
    IN_WAGE INTEGER,
    IN_NAME VARCHAR(50))
AS
begin
  if (:in_id = 0) then  insert into post values (:in_id, :in_wage, :in_name);
  else update post set name=:in_name, wage=:in_wage where id=:in_id;
end^


ALTER PROCEDURE ADDROUTE (
    IN_ID_ROUTE INTEGER,
    IN_P_DEP VARCHAR(40),
    IN_P_AR VARCHAR(40),
    IN_TR_TIME INTEGER,
    IN_ID_DIR INTEGER)
AS
begin
  if (:in_id_route = 0) then  insert into route values (:in_id_route, :in_p_dep,
  :in_p_ar, :in_tr_time, : in_id_dir);
  else update route set p_dep=:in_p_dep,
  p_ar=:in_p_ar, tr_time=:in_tr_time, id_dir=:in_id_dir where id_route=:in_id_route;
end^


ALTER PROCEDURE ADDROUTE_ST (
    IN_ID_ROUTE INTEGER,
    IN_ID_ST INTEGER)
AS
declare variable RECCOUNT integer;
begin
  select count (*) from route_st where id_route=:in_id_route and id_st=:in_id_st
  into :reccount;
  if (:reccount = 0) then insert into route_st values (:in_id_route, :in_id_st);
  else update route_st set id_route=:in_id_route,  id_st=:in_id_st;
end^


ALTER PROCEDURE ADDSTATION (
    IN_ID INTEGER,
    IN_NAME VARCHAR(50))
AS
begin
  if (:in_id = 0) then  insert into station values (:in_id, :in_name);
  else update station set name=:in_name where id=:in_id;
end^


ALTER PROCEDURE ADDTEAM (
    IN_ID INTEGER,
    IN_NAME VARCHAR(50))
AS
begin
  if (:in_id = 0) then  insert into team values (:in_id, :in_name);
  else update team set name=:in_name where id=:in_id;
end^


ALTER PROCEDURE ADDTEAM_DEP (
    IN_ID_TEAM INTEGER,
    IN_ID_DEP INTEGER)
AS
declare variable reccount integer;
begin
  select count (*) from team_dep where id_team=:in_id_team and id_dep=:in_id_dep
  into :reccount;
  if (:reccount = 0) then insert into team_dep values (:in_id_dep, :in_id_team);
  else update team_dep set id_dep=:in_id_dep,  id_team=:in_id_team;
end^


ALTER PROCEDURE ADDTICKET (
    IN_ID_TIC INTEGER,
    IN_DATA DATE,
    IN_CARRIAGE INTEGER,
    IN_SPOT INTEGER,
    IN_ID_PASS INTEGER,
    IN_STATUS INTEGER,
    IN_PRICE INTEGER,
    IN_ID_ROUTE INTEGER,
    IN_ID_TRIP INTEGER,
    IN_DEPARTURES VARCHAR(10))
AS
begin
  if (:in_id_tic = 0) then  insert into ticket values (:in_id_tic, :in_data, :in_carriage,
  :in_spot, :in_id_pass, :in_status, :in_price, :in_id_route, :in_id_trip, :in_departures);
  else update ticket set data=:in_data, carriage=:in_carriage,
  spot=:in_spot, id_pass=:in_id_pass, status=:in_status, price=:in_price, id_route=:in_id_route,
   id_trip=:in_id_trip, departures=:in_departures where id_tic=:in_id_tic;
end^


ALTER PROCEDURE ADDTRAIN (
    IN_ID_TRAIN INTEGER,
    IN_KOL_CAR INTEGER,
    IN_KOL_SPOT INTEGER,
    IN_ID_ROUTE INTEGER,
    IN_ID_TRIP INTEGER)
AS
begin
  if (:in_id_train = 0) then  insert into train values (:in_id_train, :in_kol_car,
  :in_kol_spot, :in_id_route, :in_id_trip);
  else update train set kol_car=:in_kol_car,
  kol_spot=:in_kol_spot, id_route=:in_id_route, id_trip=:in_id_trip
  where id_train=:in_id_train;
end^


ALTER PROCEDURE ADDTRIP (
    IN_ID_TRIP INTEGER,
    IN_ID_ROUTE INTEGER,
    IN_STATUS INTEGER)
AS
begin
  if (:in_id_trip = 0) then  insert into trip values (:in_id_trip, :in_id_route,
  :in_status);
  else update trip set id_route=:in_id_route,
  status=:in_status where id_trip=:in_id_trip;
end^


ALTER PROCEDURE DELETEDEP (
    IN_ID INTEGER)
AS
begin
  delete from DEP where id=:IN_ID;
end^


ALTER PROCEDURE DELETEDIRECTION (
    IN_ID INTEGER)
AS
begin
  delete from DIRECTION where id=:IN_ID;
end^


ALTER PROCEDURE DELETEEMPL (
    IN_ID INTEGER)
AS
begin
    delete from EMPL where id_EMPL =: IN_ID;
end^


ALTER PROCEDURE DELETEEMPL_TEAM (
    IN_ID_EMPL INTEGER,
    IN_ID_TEAM INTEGER)
AS
begin
  delete from empl_team where id_empl=:in_id_empl and id_team=:in_id_team;
end^


ALTER PROCEDURE DELETEPASS (
    IN_ID INTEGER)
AS
begin
  delete from pass where id=:in_id;
end^


ALTER PROCEDURE DELETEPOST (
    IN_ID INTEGER)
AS
begin
  delete from post where id=:in_id;
end^


ALTER PROCEDURE DELETEROUTE (
    IN_ID INTEGER)
AS
begin
  delete from route where id_route=:in_id;
end^


ALTER PROCEDURE DELETEROUTE_ST (
    IN_ID_ROUTE INTEGER,
    IN_ID_ST INTEGER)
AS
begin
  delete from route_st where id_route=:in_id_route and id_st=:in_id_st;
end^


ALTER PROCEDURE DELETESTATION (
    IN_ID INTEGER)
AS
begin
  delete from station where id=:in_id;
end^


ALTER PROCEDURE DELETETEAM (
    IN_ID INTEGER)
AS
begin
  delete from team where id=:in_id;
end^


ALTER PROCEDURE DELETETEAM_DEP (
    IN_ID_TEAM INTEGER,
    IN_ID_DEP INTEGER)
AS
begin
  delete from team_dep where id_dep=:in_id_dep and id_team=:in_id_team;
end^


ALTER PROCEDURE DELETETICKET (
    IN_ID INTEGER)
AS
begin
  delete from ticket where id_tic=:in_id;
end^


ALTER PROCEDURE DELETETRAIN (
    IN_ID INTEGER)
AS
begin
  delete from train where id_train=:in_id;
end^


ALTER PROCEDURE DELETETRIP (
    IN_ID_TRIP INTEGER,
    IN_ID_ROUTE INTEGER)
AS
begin
  delete from trip where ( (id_route=:in_id_route) and (id_trip=:in_id_trip));
end^



SET TERM ; ^

